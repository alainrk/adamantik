generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Exercise {
  id               Int                @id @default(autoincrement())
  muscleGroup      Int
  name             String
  videoUrl         String?
  userId           Int?
  createdAt        DateTime?          @default(now())
  exerciseInstance ExerciseInstance[]

  @@map("exercises")
}

model ExerciseInstance {
  id            Int      @id @default(autoincrement())
  relativeOrder Int
  exerciseId    Int
  workoutId     Int
  weight        Int
  expectedRir   Int
  feedback      String
  sets          String?
  workout       Workout  @relation(fields: [workoutId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  exercise      Exercise @relation(fields: [exerciseId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("exercise_instances")
}

model Mesocycle {
  id            Int       @id @default(autoincrement())
  userId        Int
  name          String
  focus         String
  numberOfWeeks Int
  numberOfDays  Int
  createdAt     DateTime? @default(now())
  template      String
  user          User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  weeks         Week[]

  @@map("mesocycles")
}

model MesocycleTemplate {
  id           Int       @id @default(autoincrement())
  name         String
  focus        String
  userId       Int?
  numberOfDays Int
  createdAt    DateTime? @default(now())
  template     String
  user         User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("mesocycle_template")
}

model User {
  id                 Int                 @id @default(autoincrement())
  provider           String
  name               String
  email              String              @unique
  createdAt          DateTime?           @default(now())
  mesocycles         Mesocycle[]
  mesocycleTemplates MesocycleTemplate[]
  workouts           Workout[]
  weeks              Week[]

  @@map("users")
}

model Week {
  id            Int       @id @default(autoincrement())
  numberOfDays  Int
  relativeOrder Int
  mesocycleId   Int
  userId        Int
  createdAt     DateTime? @default(now())
  completedAt   DateTime?
  mesocycle     Mesocycle @relation(fields: [mesocycleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workouts      Workout[]

  @@map("weeks")
}

model Workout {
  id                Int                @id @default(autoincrement())
  relativeOrder     Int
  weekId            Int
  userId            Int
  // This is null until the app starts the workout
  startedAt         DateTime?
  createdAt         DateTime?          @default(now())
  completedAt       DateTime?
  exerciseInstances ExerciseInstance[]
  week              Week               @relation(fields: [weekId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("workouts")
}
